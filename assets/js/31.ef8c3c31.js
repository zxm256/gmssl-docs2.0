(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{314:function(s,a,e){"use strict";e.r(a);var t=e(14),r=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"gmssl命令行工具示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gmssl命令行工具示例"}},[s._v("#")]),s._v(" gmssl命令行工具示例")]),s._v(" "),a("p",[s._v("本部分将结合一些典型的应用场景对gmssl命令行工具的具体使用方法进行介绍，具体每个命令行的功能及使用方法请参看上一部分。")]),s._v(" "),a("h2",{attrs:{id:"sm2算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm2算法"}},[s._v("#")]),s._v(" SM2算法")]),s._v(" "),a("h3",{attrs:{id:"sm2密钥对生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm2密钥对生成"}},[s._v("#")]),s._v(" SM2密钥对生成")]),s._v(" "),a("p",[s._v("生成SM2私钥sm2.pem，公钥sm2pub.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm2keygen -pass 1234 -out sm2.pem -pubout sm2pub.pem\n")])])]),a("h3",{attrs:{id:"sm2加密解密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm2加密解密"}},[s._v("#")]),s._v(" SM2加密解密")]),s._v(" "),a("p",[s._v("首先生成SM2公私钥对")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm2keygen -pass 1234 -out sm2.pem -pubout sm2pub.pem\n")])])]),a("p",[s._v("然后使用SM2私钥、私钥加密口令对数据进行签名")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm2sign -key sm2.pem -pass 1234 -out sm2.sig \n\nid默认为1234567812345678，也可以手动指定\necho hello | gmssl sm2sign -key sm2.pem -pass 1234 -out sm2.sig -id 1234567812345678\n")])])]),a("h3",{attrs:{id:"sm2签名验签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm2签名验签"}},[s._v("#")]),s._v(" SM2签名验签")]),s._v(" "),a("p",[s._v("生成SM2公私钥对")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm2keygen -pass 1234 -out sm2.pem -pubout sm2pub.pem\n")])])]),a("p",[s._v("使用SM2私钥、私钥加密口令对数据进行签名")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm2sign -key sm2.pem -pass 1234 -out sm2.sig \n\nid默认为1234567812345678，也可以手动指定\necho hello | gmssl sm2sign -key sm2.pem -pass 1234 -out sm2.sig -id 1234567812345678\n")])])]),a("p",[s._v("使用SM2公钥进行验签")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm2verify -pubkey sm2pub.pem -sig sm2.sig -id 1234567812345678\n")])])]),a("h2",{attrs:{id:"sm3算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm3算法"}},[s._v("#")]),s._v(" SM3算法")]),s._v(" "),a("p",[s._v("使用SM3算法对Linux 管道的数据进行哈希")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo -n abc | gmssl sm3\n")])])]),a("p",[s._v("当指定-pubkey的时候，表示生成SM2签名所需的中间结果")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm2keygen -pass 1234 -out sm2.pem -pubout sm2pub.pem\necho -n abc | gmssl sm3 -pubkey sm2pub.pem \n")])])]),a("p",[s._v("使用指定的key，对Linux管道的数据计算SM3 的HMAC")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo -n abc | gmssl sm3hmac -key 11223344556677881122334455667788\n")])])]),a("h2",{attrs:{id:"sm4算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm4算法"}},[s._v("#")]),s._v(" SM4算法")]),s._v(" "),a("p",[s._v("设置SM4加密解密用到的参数")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("KEY=11223344556677881122334455667788\nIV=11223344556677881122334455667788\n")])])]),a("p",[s._v("使用SM4 CBC模式对管道的数据进行加密解密，可以使用-in参数指定加密的文件，-out参数指定输出的文件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm4 -cbc -encrypt -key $KEY -iv $IV -out sm4.cbc\ngmssl sm4 -cbc -decrypt -key $KEY -iv $IV -in sm4.cbc\n")])])]),a("p",[s._v("使用SM4 CTR模式，对管道的数据进行加密解密，可以使用-in参数指定加密的文件，-out参数指定输出的文件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm4 -ctr -encrypt -key $KEY -iv $IV -out sm4.ctr\ngmssl sm4 -ctr -decrypt -key $KEY -iv $IV -in sm4.ctr\n")])])]),a("h2",{attrs:{id:"sm9算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm9算法"}},[s._v("#")]),s._v(" SM9算法")]),s._v(" "),a("h3",{attrs:{id:"sm9签名验签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm9签名验签"}},[s._v("#")]),s._v(" SM9签名验签")]),s._v(" "),a("p",[s._v("初始化生成SM9 主公钥sign_mpk.pem、主私钥sign_msk.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm9setup -alg sm9sign -pass 1234 -out sign_msk.pem -pubout sign_mpk.pem\n")])])]),a("p",[s._v("使用主私钥生成用户alice的用户私钥alice.pem，并使用outpass参数指定的口令加密")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm9keygen -alg sm9sign -in sign_msk.pem -inpass 1234 -id alice -out alice.pem -outpass 1234\n")])])]),a("p",[s._v("使用用户alice的用户私钥对数据进行签名，生成签名hello.sig")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm9sign -key alice.pem -pass 1234  -out hello.sig\n")])])]),a("p",[s._v("使用主公钥sign_mpk.pem对签名数据进行验签")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm9verify -pubmaster sign_mpk.pem -id alice -sig hello.sig\n")])])]),a("h3",{attrs:{id:"sm9加密解密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sm9加密解密"}},[s._v("#")]),s._v(" SM9加密解密")]),s._v(" "),a("p",[s._v("初始化生成SM9 主公钥enc_mpk.pem、主私钥enc_msk.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm9setup -alg sm9encrypt -pass 1234 -out enc_msk.pem -pubout enc_mpk.pem\n")])])]),a("p",[s._v("使用主私钥生成用户bob的用户私钥bob.pem，并使用outpass参数指定的口令加密")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm9keygen -alg sm9encrypt -in enc_msk.pem -inpass 1234 -id bob -out bob.pem -outpass 1234\n")])])]),a("p",[s._v("使用主公钥以及用户bob的id进行加密，生成加密文件hello.der")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl sm9encrypt -pubmaster enc_mpk.pem -id bob -out hello.der\n")])])]),a("p",[s._v("使用用户bob的私钥对加密文件进行解密")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm9decrypt -key bob.pem -pass 1234 -id bob -in hello.der\n")])])]),a("h2",{attrs:{id:"zuc算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zuc算法"}},[s._v("#")]),s._v(" ZUC算法")]),s._v(" "),a("h3",{attrs:{id:"zuc加密解密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zuc加密解密"}},[s._v("#")]),s._v(" ZUC加密解密")]),s._v(" "),a("p",[s._v("由于ZUC算法是对称加密算法，所以加密解密的操作是一样的。")]),s._v(" "),a("p",[s._v("设置ZUC算法加密所需的秘钥和IV")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("KEY=11223344556677881122334455667788\nIV=11223344556677881122334455667788\n")])])]),a("p",[s._v("使用秘钥和IV对数据进行加密和解密")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("echo hello | gmssl zuc -key $KEY -iv $IV -out zuc.bin\ngmssl zuc -key $KEY -iv $IV -in zuc.bin\n")])])]),a("h2",{attrs:{id:"ca"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ca"}},[s._v("#")]),s._v(" CA")]),s._v(" "),a("h3",{attrs:{id:"根ca自签发证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根ca自签发证书"}},[s._v("#")]),s._v(" 根CA自签发证书")]),s._v(" "),a("p",[s._v("首先生成CA根证书私钥rootcakey.pem，然后进行自签名，生成根证书rootcacert.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm2keygen -pass 1234 -out rootcakey.pem\ngmssl certgen -C CN -ST Beijing -L Haidian -O PKU -OU CS -CN ROOTCA -days 3650 -key rootcakey.pem -pass 1234 -out rootcacert.pem -key_usage keyCertSign -key_usage cRLSign\n")])])]),a("p",[s._v("查看生成的自签名证书rootcacert.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl certparse -in rootcacert.pem\n")])])]),a("h3",{attrs:{id:"根ca签发二级ca证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根ca签发二级ca证书"}},[s._v("#")]),s._v(" 根CA签发二级CA证书")]),s._v(" "),a("p",[s._v("首先生成二级CA的证书私钥，然后生成证书请求careq.pem，然后由根CA进行签名，生成二级CA的证书cacert.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('gmssl sm2keygen -pass 1234 -out cakey.pem\ngmssl reqgen -C CN -ST Beijing -L Haidian -O PKU -OU CS -CN "Sub CA" -days 3650 -key cakey.pem -pass 1234 -out careq.pem\ngmssl reqsign -in careq.pem -days 365 -key_usage keyCertSign -path_len_constraint 0 -cacert rootcacert.pem -key rootcakey.pem -pass 1234 -out cacert.pem\n')])])]),a("p",[s._v("查看生成的二级CA证书cacert.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl certparse -in cacert.pem\n")])])]),a("h3",{attrs:{id:"二级ca签发用户证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二级ca签发用户证书"}},[s._v("#")]),s._v(" 二级CA签发用户证书")]),s._v(" "),a("p",[s._v("首先生成用户私钥，并通过用户私钥生成证书请求encreq.pem，然后由二级CA进行签发，生成用户证书enccert.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl sm2keygen -pass 1234 -out enckey.pem\ngmssl reqgen -C CN -ST Beijing -L Haidian -O PKU -OU CS -CN localhost -days 365 -key enckey.pem -pass 1234 -out encreq.pem\ngmssl reqsign -in encreq.pem -days 365 -key_usage keyEncipherment -cacert cacert.pem -key cakey.pem -pass 1234 -out enccert.pem\n")])])]),a("p",[s._v("查看生成的用户证书enccert.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl certparse -in enccert.pem\n")])])]),a("p",[s._v("将二级CA的证书和用户证书放在一个文件中，形成完整的用户证书文件certs.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cat enccert.pem > certs.pem\ncat cacert.pem >> certs.pem\n")])])]),a("h2",{attrs:{id:"数字证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字证书"}},[s._v("#")]),s._v(" 数字证书")]),s._v(" "),a("h3",{attrs:{id:"生成自签名证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成自签名证书"}},[s._v("#")]),s._v(" 生成自签名证书")]),s._v(" "),a("p",[s._v("生成证书公私钥对，然后使用certgen命令生成自签名证书cert.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('gmssl sm2keygen -pass 1234 -out sm2.pem -pubout sm2pub.pem\n\ngmssl certgen -C CN -ST Beijing -L Haidian -O PKU -OU CS -CN Alice -days 365 -key sm2.pem -pass 1234 \\\n  -key_usage "digitalSignature" -key_usage "keyCertSign" -key_usage cRLSign \\\n  -out cert.pem\n')])])]),a("h3",{attrs:{id:"解析数字证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析数字证书"}},[s._v("#")]),s._v(" 解析数字证书")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl certparse -in cert.pem\n")])])]),a("h2",{attrs:{id:"cms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms"}},[s._v("#")]),s._v(" CMS")]),s._v(" "),a("h3",{attrs:{id:"cms加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms加密"}},[s._v("#")]),s._v(" CMS加密")]),s._v(" "),a("p",[s._v("使用数字证书cert.pem（数字证书的生成可以参考[[#生成自签名证书]]或者CA相关部分）对plain.txt文件进行加密，生成加密文件enveloped_data.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl cmsencrypt -in plain.txt -rcptcert cert.pem -out enveloped_data.pem\n")])])]),a("h3",{attrs:{id:"cms解密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms解密"}},[s._v("#")]),s._v(" CMS解密")]),s._v(" "),a("p",[s._v("使用私钥key.pem对enveloped data进行解密")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl cmsdecrypt -key key.pem -pass 1234 -cert cert.pem -in enveloped_data.pem\n")])])]),a("h3",{attrs:{id:"cms签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms签名"}},[s._v("#")]),s._v(" CMS签名")]),s._v(" "),a("p",[s._v("使用证书cert.pem对plain.txt进行签名，输出为signed_data.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl cmssign -key key.pem -pass 1234 -cert cert.pem -in plain.txt -out signed_data.pem\n")])])]),a("h3",{attrs:{id:"cms验签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms验签"}},[s._v("#")]),s._v(" CMS验签")]),s._v(" "),a("p",[s._v("验证signed_data.pem，原始数据输出到signed_data.txt")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl cmsverify -in signed_data.pem -out signed_data.txt\n")])])]),a("h3",{attrs:{id:"cms解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms解析"}},[s._v("#")]),s._v(" CMS解析")]),s._v(" "),a("p",[s._v("解析CMS签名数据signed_data.pem")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl cmsparse -in signed_data.pem\n")])])]),a("h2",{attrs:{id:"pbkdf2算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pbkdf2算法"}},[s._v("#")]),s._v(" PBKDF2算法")]),s._v(" "),a("p",[s._v("使用PBKDF2算法，对password 1234 和salt进行6000次哈希计算")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("gmssl pbkdf2 -pass 1234 -salt 1122334455667788 -iter 60000 -outlen 16\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);